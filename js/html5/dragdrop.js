document.addEventListener("DOMContentLoaded", () => {
    // üîπ Drag & Drop API

    const dragMe = document.getElementById("dragMe");
    const dropZone = document.getElementById("dropZone");

    // H√∫zhat√≥ elem: kezd≈ë esem√©ny
    dragMe.addEventListener("dragstart", (e) => {
        e.dataTransfer.setData("text/plain", "draggedBox");
        console.log("üî¥ Elem h√∫z√°sa megkezdve");
    });

    // Drop z√≥na: enged√©lyezz√ºk a r√°ejt√©st
    dropZone.addEventListener("dragover", (e) => {
        e.preventDefault(); // sz√ºks√©ges a drop-hoz
        dropZone.style.background = "#eef";
    });

    // Drop z√≥na: elhagy√°s eset√©n h√°tt√©r vissza√°ll√≠t√°sa
    dropZone.addEventListener("dragleave", () => {
        dropZone.style.background = "";
    });

    // Drop esem√©ny: pontos poz√≠cion√°l√°s
    dropZone.addEventListener("drop", (e) => {
        e.preventDefault();

        const data = e.dataTransfer.getData("text/plain");
        if (data === "draggedBox") {
            // Be√°ll√≠tjuk relat√≠v poz√≠cion√°l√°ssal a dob√°s hely√©t
            const zoneRect = dropZone.getBoundingClientRect();

            const x = e.clientX - zoneRect.left;
            const y = e.clientY - zoneRect.top;

            dragMe.style.position = "absolute";
            dragMe.style.left = x - dragMe.offsetWidth / 2 + "px";
            dragMe.style.top = y - dragMe.offsetHeight / 2 + "px";

            // Biztos√≠tjuk, hogy a dropZone legyen relat√≠v kont√©ner
            dropZone.style.position = "relative";
            dropZone.appendChild(dragMe);

            dropZone.style.background = "#dfd";
            console.log(`‚úÖ Elem elhelyezve: (${x}, ${y})`);
        }
    });

    console.log("üü¶ dragdrop.js bet√∂ltve");
});
